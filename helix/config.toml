theme = "neo-ansi"

[editor]
auto-pairs = false
line-number = "relative"
shell = ["sh", "-c"]
# shell = ["nu", "-l", "--stdin", "-c"]
#mouse = false
gutters = ["diagnostics", "line-numbers", "spacer", "diff"]
# gutters = []
bufferline = "multiple"
color-modes = true
undercurl = true
true-color = true
text-width = 88
rainbow-brackets = true

[editor.soft-wrap]
enable = true
max-wrap = 25 # increase value to reduce forced mid-word wrapping
# max-indent-retain = 40
# wrap-indicator = ""  # set wrap-indicator to "" to hide it

[editor.smart-tab]
enable = false


[editor.indent-guides]
#render = true
#character = "╎" # Some characters that work well: "▏", "┆", "┊", "⸽"
skip-levels = 1

[editor.whitespace.render]
ndsp = "all"
tab = "all"
#space = "trailing"
# newline = "all"

[editor.whitespace.characters]
tab = "→"
space = "·"
newline = "⏎"
#tabpad = "·"

[editor.inline-diagnostics]
cursor-line = "hint"
# other-lines = "error"

[editor.file-picker]
hidden = false
git-ignore = false

[editor.lsp]
"display-messages" = true

[editor.statusline]
left = ["mode", "spinner", "file-name", "read-only-indicator", "file-modification-indicator"]
center = []
right = ["diagnostics", "version-control", "register", "position", "file-type", "file-encoding", "file-line-ending"]

[keys.insert]
"S-esc" = ["normal_mode", "keep_primary_selection"]

[keys.normal]
"A-z" = ":toggle-option soft-wrap.enable"
"esc" = [":redraw"]
"C-q" = ":bc"
"A-q" = ":quit"
"C-s" = ["save_selection", ":w"]

"A-*" = [ "search_selection", "make_search_word_bounded" ]

"A-k" = ":tree-sitter-subtree"
"," = "repeat_last_motion"
"S-esc" = ["normal_mode", "keep_primary_selection"]
"C-/" = "toggle_comments"
"C-6" = "goto_last_accessed_file"
"G" = ["goto_last_line"]
"g" = { "e" = "goto_file_end" }

#"ret" = ["open_below", "normal_mode"]

"F2" = "rename_symbol"
"F3" = ":format"
"F12" = "goto_definition"
"S-F12" = "goto_reference"
"F4" = [":reload", ":config-reload", ":redraw"]

"w" = "select_next_word"
"W" = "select_next_long_word"
"b" = "select_prev_word"
"B" = "select_prev_long_word"
"A-e" = "move_prev_word_start"
"A-E" = "move_prev_long_word_start"

J = ["select_line_below"]
K = ["select_line_above"]
"H" = ["ensure_selections_forward", "collapse_selection", "select_mode", "goto_line_start", "exit_select_mode"]
"L" = ["ensure_selections_forward", "flip_selections", "collapse_selection", "select_mode", "goto_line_end", "exit_select_mode"]

"A-j" = "join_selections"
"A-J" = "join_selections_space"

X = "remove_primary_selection"
x = "keep_selections"
"A-x" = "remove_selections"
"_" = ["extend_to_line_bounds", "trim_selections"]

"F5" = [ ":w", ":sh just" ]
"S-F5" = [ ":w",  ":sh echo just | wezterm cli send-text --pane-id $(wezterm cli get-pane-direction Right)" ]

[keys.select]
"C-q" = ":bc"
"A-q" = ":quit"
"C-s" = [":w"]

"*" = [ "search_selection", "normal_mode" ]
"A-*" = [ "search_selection", "make_search_word_bounded", "normal_mode" ]
"," = "repeat_last_motion"
"S-esc" = ["normal_mode", "keep_primary_selection"]
"C-/" = "toggle_comments"
"C-6" = "goto_last_accessed_file"
"G" = ["extend_to_last_line"]
"g" = { "e" = "extend_to_file_end" }

"H" = ["goto_line_start"]
"L" = ["goto_line_end"]

"F4" = [":reload", ":config-reload", ":redraw"]

"w" = "extend_next_word_end"
"W" = "extend_next_long_word_end"
"b" = "extend_prev_word_start"
"B" = "extend_prev_long_word_start"
"A-e" = "extend_prev_word_start"
"A-E" = "extend_prev_long_word_start"

# J = ["extend_line_down", "extend_to_line_bounds"]
# K = ["extend_line_up", "extend_to_line_bounds"]
# J = ["extend_line_down"]
# K = ["extend_line_up"]
J = ["select_line_below"]
K = ["select_line_above"]

"A-j" = "join_selections"
"A-J" = "join_selections_space"

X = "remove_primary_selection"
x = "keep_selections"
"A-x" = "remove_selections"

# Make char search independent of the orientation of the selection
#"t" = ["ensure_selections_forward", "extend_till_char"]
#"T" = ["ensure_selections_forward", "flip_selections", "extend_till_prev_char"]
#"f" = ["ensure_selections_forward", "extend_next_char"]
#"F" = ["ensure_selections_forward", "flip_selections", "extend_prev_char"]

[keys.normal.space]
"A-f" = "file_picker_in_current_buffer_directory"
"e" = "file_explorer_in_current_buffer_directory"
# E = """
# :sh echo `echo $':open "(broot)"\r' | wezterm cli send-text --pane-id (wezterm cli get-pane-direction left); exit\r`
#   | wezterm cli send-text --pane-id (wezterm cli split-pane --right --percent 33) --no-paste
# """
z = ":toggle gutters.line-numbers.min-width 48 3"
i = "hover"
"\\" = ":reflow"
# E = [
#   ':sh rm -f /tmp/unique-file',
#   ':insert-output yazi --chooser-file=/tmp/unique-file',
#   ':pipe-to sh -c "stty raw -echo -ixon < /dev/tty"',
#   ':open %sh{test -s /tmp/unique-file && cat /tmp/unique-file || echo}',
#   ':redraw',
# ]
# E = [
#   ':sh rm -f $TMP_UNIX/files2open',
#   ':sh echo "my command" | wezterm cli send-text --pane-id $(wezterm cli split-pane --left --percent 90) --no-paste',
#   ':insert-output yazi "%{buffer_name}" --chooser-file=$TMP_UNIX/files2open',
#   ':redraw',
#   ':echo %sh{echo $TMP_WIN/files2open}',
#   ':open %sh{echo $TMP_WIN/files2open}',
#   # 'select_all',
#   # 'split_selection_on_newline',
#   # 'goto_file',
#   # ':buffer-close! $TMP/files2open',
# ]
# E = """
# :sh echo `echo $':open "(broot)"\r' | wezterm cli send-text --pane-id (wezterm cli get-pane-direction left); exit\r`
#   | wezterm cli send-text --pane-id (wezterm cli split-pane --right --percent 33) --no-paste
# """

# # Unison
# v = """
# :pipe-to | lines | str join ' ' | $"view ($in)\r" |  wezterm cli send-text --pane-id (wezterm cli get-pane-direction Right)
# """
# l = """
# :pipe-to | lines | str join ' ' | $"ls ($in)\r" |  wezterm cli send-text --pane-id (wezterm cli get-pane-direction Right)
# """
# r = """
# :pipe-to | lines | str join ' ' | $"run ($in)\r" |  wezterm cli send-text --pane-id (wezterm cli get-pane-direction Right)
# """

[keys.select.space]
F = "file_picker_in_current_buffer_directory"
z = ":toggle gutters.line-numbers.min-width 48 3"
i = "hover"

# Sub mode for hex color modification
[keys.normal."+"]
d = ":pipe pastel darken 0.05 | pastel format hex | str substring 1.."
l = ":pipe pastel lighten 0.05 | pastel format hex | str substring 1.."
g = ":pipe pastel desaturate 0.05 | pastel format hex | str substring 1.."
s = ":pipe pastel saturate 0.05 | pastel format hex | str substring 1.."
